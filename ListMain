#include <stdio.h>
#include <stdlib.h>

typedef struct ArrayList {
	int arr[100];
	int numofData;
} List;

void ListInit(List *pList) {
	pList->numofData = 0; //데이터의 개수
}

void LInsert(List *pList, int data) {
	
	if (pList->numofData > 100) { //저장공간을 넘어서면 저장불가
		puts("저장이 불가능합니다.");
		return;
	}
	else { //저장공간이 있는 경우
		pList->arr[pList->numofData] = data;
		(pList->numofData)++;
	}
}
void LPrint(List *pList) {
	int i = 0;
	while (i < (pList->numofData)) {
		printf("%d\t", (pList->arr[i]));
		i++;
	}
	printf("\n");
}
void LRemove(List *pList, int data) {
	int i = 0;
	int j = 0;
	int temp = 0;

	while (i < (pList->numofData)) {
		if ((pList->arr[i]) == data) {
			j = i;
			temp = (pList->numofData);
			while (j < temp) {
				(pList->arr[j]) = (pList->arr[j + 1]);
				j++;
			}
			(pList->numofData)--;
		}
		else {
			i++;
		}
	}
}
int LCount(List *pList) {
	return (pList->numofData);
}
int main(void) {
	List list;
	int count = 0;
	ListInit(&list);
	//5개의 데이터 저장
	LInsert(&list, 10);
	LInsert(&list, 20);
	LInsert(&list, 30);
	LInsert(&list, 30);
	LInsert(&list, 30);
	LInsert(&list, 40);
	LInsert(&list, 50);
	LInsert(&list, 60);
	LInsert(&list, 30);



	LPrint(&list);

	count = LCount(&list);
	printf("List 데이터 개수 : %d\n", count);

	LRemove(&list, 30);

	LPrint(&list);

	count = LCount(&list);
	printf("List 데이터 개수 : %d\n", count);

	return 0;
}
